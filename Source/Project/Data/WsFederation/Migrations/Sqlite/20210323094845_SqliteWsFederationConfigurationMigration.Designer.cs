// <auto-generated />
using HansKindberg.IdentityServer.Data.WsFederation;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HansKindberg.IdentityServer.Data.WsFederation.Migrations.Sqlite
{
    [DbContext(typeof(SqliteWsFederationConfiguration))]
    [Migration("20210323094845_SqliteWsFederationConfigurationMigration")]
    partial class SqliteWsFederationConfigurationMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("Rsk.WsFederation.EntityFramework.Entities.RelyingParty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DigestAlgorithm")
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.Property<string>("Realm")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.Property<string>("SamlNameIdentifierFormat")
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.Property<string>("SignatureAlgorithm")
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.Property<string>("TokenType")
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.HasKey("Id");

                    b.HasIndex("Realm")
                        .IsUnique();

                    b.ToTable("RelyingParties");
                });

            modelBuilder.Entity("Rsk.WsFederation.EntityFramework.Entities.WsFederationClaimMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NewClaimType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.Property<string>("OriginalClaimType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.Property<int>("RelyingPartyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RelyingPartyId");

                    b.ToTable("RelyingPartyClaimMappings");
                });

            modelBuilder.Entity("Rsk.WsFederation.EntityFramework.Entities.WsFederationClaimMap", b =>
                {
                    b.HasOne("Rsk.WsFederation.EntityFramework.Entities.RelyingParty", "RelyingParty")
                        .WithMany("ClaimMapping")
                        .HasForeignKey("RelyingPartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelyingParty");
                });

            modelBuilder.Entity("Rsk.WsFederation.EntityFramework.Entities.RelyingParty", b =>
                {
                    b.Navigation("ClaimMapping");
                });
#pragma warning restore 612, 618
        }
    }
}
