// <auto-generated />

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace HansKindberg.IdentityServer.Data.Saml.Migrations.Sqlite
{
	[DbContext(typeof(SqliteSamlConfiguration))]
	partial class SqliteSamlConfigurationModelSnapshot : ModelSnapshot
	{
		#region Methods

		protected override void BuildModel(ModelBuilder modelBuilder)
		{
#pragma warning disable 612, 618
			modelBuilder
				.HasAnnotation("ProductVersion", "5.0.4");

			modelBuilder.Entity("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.AssertionConsumerService", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("INTEGER");

				b.Property<string>("Binding")
					.IsRequired()
					.HasMaxLength(2000)
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<int>("Index")
					.HasColumnType("INTEGER");

				b.Property<bool>("IsDefault")
					.HasColumnType("INTEGER");

				b.Property<string>("Location")
					.IsRequired()
					.HasMaxLength(2000)
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<int>("ServiceProviderId")
					.HasColumnType("INTEGER");

				b.HasKey("Id");

				b.HasIndex("ServiceProviderId");

				b.ToTable("ServiceProviderAssertionConsumerServices");
			});

			modelBuilder.Entity("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.SamlClaimMap", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("INTEGER");

				b.Property<string>("NewClaimType")
					.IsRequired()
					.HasMaxLength(250)
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<string>("OriginalClaimType")
					.IsRequired()
					.HasMaxLength(250)
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<int>("ServiceProviderId")
					.HasColumnType("INTEGER");

				b.HasKey("Id");

				b.HasIndex("ServiceProviderId");

				b.ToTable("ServiceProviderClaimMappings");
			});

			modelBuilder.Entity("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.ServiceProvider", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("INTEGER");

				b.Property<bool>("AllowIdpInitiatedSso")
					.HasColumnType("INTEGER");

				b.Property<bool>("EncryptAssertions")
					.HasColumnType("INTEGER");

				b.Property<byte[]>("EncryptionCertificate")
					.HasColumnType("BLOB");

				b.Property<string>("EntityId")
					.IsRequired()
					.HasMaxLength(200)
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<bool?>("RequireAuthenticationRequestsSigned")
					.HasColumnType("INTEGER");

				b.Property<bool>("RequireSamlMessageDestination")
					.HasColumnType("INTEGER");

				b.Property<bool>("SignAssertions")
					.HasColumnType("INTEGER");

				b.HasKey("Id");

				b.HasIndex("EntityId")
					.IsUnique();

				b.ToTable("ServiceProviders");
			});

			modelBuilder.Entity("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.SigningCertificate", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("INTEGER");

				b.Property<byte[]>("Certificate")
					.IsRequired()
					.HasColumnType("BLOB");

				b.Property<int>("ServiceProviderId")
					.HasColumnType("INTEGER");

				b.HasKey("Id");

				b.HasIndex("ServiceProviderId");

				b.ToTable("ServiceProviderSignCertificates");
			});

			modelBuilder.Entity("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.SingleLogoutService", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("INTEGER");

				b.Property<string>("Binding")
					.IsRequired()
					.HasMaxLength(2000)
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<int>("Index")
					.HasColumnType("INTEGER");

				b.Property<bool>("IsDefault")
					.HasColumnType("INTEGER");

				b.Property<string>("Location")
					.IsRequired()
					.HasMaxLength(2000)
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<int>("ServiceProviderId")
					.HasColumnType("INTEGER");

				b.HasKey("Id");

				b.HasIndex("ServiceProviderId");

				b.ToTable("ServiceProviderSingleLogoutServices");
			});

			modelBuilder.Entity("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.AssertionConsumerService", b =>
			{
				b.HasOne("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.ServiceProvider", "ServiceProvider")
					.WithMany("AssertionConsumerServices")
					.HasForeignKey("ServiceProviderId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();

				b.Navigation("ServiceProvider");
			});

			modelBuilder.Entity("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.SamlClaimMap", b =>
			{
				b.HasOne("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.ServiceProvider", "ServiceProvider")
					.WithMany("ClaimsMapping")
					.HasForeignKey("ServiceProviderId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();

				b.Navigation("ServiceProvider");
			});

			modelBuilder.Entity("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.SigningCertificate", b =>
			{
				b.HasOne("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.ServiceProvider", "ServiceProvider")
					.WithMany("SigningCertificates")
					.HasForeignKey("ServiceProviderId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();

				b.Navigation("ServiceProvider");
			});

			modelBuilder.Entity("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.SingleLogoutService", b =>
			{
				b.HasOne("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.ServiceProvider", "ServiceProvider")
					.WithMany("SingleLogoutServices")
					.HasForeignKey("ServiceProviderId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();

				b.Navigation("ServiceProvider");
			});

			modelBuilder.Entity("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.ServiceProvider", b =>
			{
				b.Navigation("AssertionConsumerServices");

				b.Navigation("ClaimsMapping");

				b.Navigation("SigningCertificates");

				b.Navigation("SingleLogoutServices");
			});
#pragma warning restore 612, 618
		}

		#endregion
	}
}