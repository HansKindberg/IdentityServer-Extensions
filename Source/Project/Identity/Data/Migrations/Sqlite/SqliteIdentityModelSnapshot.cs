// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace HansKindberg.IdentityServer.Identity.Data.Migrations.Sqlite
{
	[DbContext(typeof(SqliteIdentity))]
	partial class SqliteIdentityModelSnapshot : ModelSnapshot
	{
		#region Methods

		protected override void BuildModel(ModelBuilder modelBuilder)
		{
#pragma warning disable 612, 618
			modelBuilder
				.HasAnnotation("ProductVersion", "5.0.3");

			modelBuilder.Entity("HansKindberg.IdentityServer.Identity.Role", b =>
			{
				b.Property<string>("Id")
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<string>("ConcurrencyStamp")
					.IsConcurrencyToken()
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<string>("Name")
					.HasMaxLength(256)
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<string>("NormalizedName")
					.HasMaxLength(256)
					.HasColumnType("TEXT COLLATE NOCASE");

				b.HasKey("Id");

				b.HasIndex("NormalizedName")
					.IsUnique()
					.HasDatabaseName("RoleNameIndex");

				b.ToTable("AspNetRoles");
			});

			modelBuilder.Entity("HansKindberg.IdentityServer.Identity.User", b =>
			{
				b.Property<string>("Id")
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<int>("AccessFailedCount")
					.HasColumnType("INTEGER");

				b.Property<string>("ConcurrencyStamp")
					.IsConcurrencyToken()
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<string>("Email")
					.HasMaxLength(256)
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<bool>("EmailConfirmed")
					.HasColumnType("INTEGER");

				b.Property<bool>("LockoutEnabled")
					.HasColumnType("INTEGER");

				b.Property<DateTimeOffset?>("LockoutEnd")
					.HasColumnType("TEXT");

				b.Property<string>("NormalizedEmail")
					.HasMaxLength(256)
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<string>("NormalizedUserName")
					.HasMaxLength(256)
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<string>("PasswordHash")
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<string>("PhoneNumber")
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<bool>("PhoneNumberConfirmed")
					.HasColumnType("INTEGER");

				b.Property<string>("SecurityStamp")
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<bool>("TwoFactorEnabled")
					.HasColumnType("INTEGER");

				b.Property<string>("UserName")
					.HasMaxLength(256)
					.HasColumnType("TEXT COLLATE NOCASE");

				b.HasKey("Id");

				b.HasIndex("NormalizedEmail")
					.HasDatabaseName("EmailIndex");

				b.HasIndex("NormalizedUserName")
					.IsUnique()
					.HasDatabaseName("UserNameIndex");

				b.ToTable("AspNetUsers");
			});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("INTEGER");

				b.Property<string>("ClaimType")
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<string>("ClaimValue")
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<string>("RoleId")
					.IsRequired()
					.HasColumnType("TEXT COLLATE NOCASE");

				b.HasKey("Id");

				b.HasIndex("RoleId");

				b.ToTable("AspNetRoleClaims");
			});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("INTEGER");

				b.Property<string>("ClaimType")
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<string>("ClaimValue")
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<string>("UserId")
					.IsRequired()
					.HasColumnType("TEXT COLLATE NOCASE");

				b.HasKey("Id");

				b.HasIndex("UserId");

				b.ToTable("AspNetUserClaims");
			});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
			{
				b.Property<string>("LoginProvider")
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<string>("ProviderKey")
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<string>("ProviderDisplayName")
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<string>("UserId")
					.IsRequired()
					.HasColumnType("TEXT COLLATE NOCASE");

				b.HasKey("LoginProvider", "ProviderKey");

				b.HasIndex("UserId");

				b.ToTable("AspNetUserLogins");
			});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
			{
				b.Property<string>("UserId")
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<string>("RoleId")
					.HasColumnType("TEXT COLLATE NOCASE");

				b.HasKey("UserId", "RoleId");

				b.HasIndex("RoleId");

				b.ToTable("AspNetUserRoles");
			});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
			{
				b.Property<string>("UserId")
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<string>("LoginProvider")
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<string>("Name")
					.HasColumnType("TEXT COLLATE NOCASE");

				b.Property<string>("Value")
					.HasColumnType("TEXT COLLATE NOCASE");

				b.HasKey("UserId", "LoginProvider", "Name");

				b.ToTable("AspNetUserTokens");
			});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
			{
				b.HasOne("HansKindberg.IdentityServer.Identity.Role", null)
					.WithMany()
					.HasForeignKey("RoleId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();
			});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
			{
				b.HasOne("HansKindberg.IdentityServer.Identity.User", null)
					.WithMany()
					.HasForeignKey("UserId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();
			});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
			{
				b.HasOne("HansKindberg.IdentityServer.Identity.User", null)
					.WithMany()
					.HasForeignKey("UserId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();
			});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
			{
				b.HasOne("HansKindberg.IdentityServer.Identity.Role", null)
					.WithMany()
					.HasForeignKey("RoleId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();

				b.HasOne("HansKindberg.IdentityServer.Identity.User", null)
					.WithMany()
					.HasForeignKey("UserId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();
			});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
			{
				b.HasOne("HansKindberg.IdentityServer.Identity.User", null)
					.WithMany()
					.HasForeignKey("UserId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();
			});
#pragma warning restore 612, 618
		}

		#endregion
	}
}