{
	"ApiResources": [
		{
			"Name": "role-service",
			"Description": "The api-resource to get roles for authorization.",
			"DisplayName": "Role-service",
			"Emphasize": true,
			"Scopes": [
				"role-service"
			],
			"UserClaims": [
				"name",
				"upn"
			]
		},
		{
			"DisplayName": "Resource #1",
			"Name": "resource1",
			"Scopes": [
				"resource1.scope1",
				"shared.scope"
			]
		},
		{
			"DisplayName": "Resource #2",
			"Name": "resource2",
			"Scopes": [
				"resource2.scope1",
				"shared.scope"
			],
			"UserClaims": [
				"email",
				"name"
			]
		}
	],
	"ApiScopes": [
		{
			"Description": "The scope to get roles for authorization.",
			"DisplayName": "Role-service",
			"Name": "role-service"
		},
		{
			"Name": "IdentityServerApi"
		},
		{
			"Name": "resource1.scope1"
		},
		{
			"Name": "resource2.scope1"
		},
		{
			"Name": "scope3"
		},
		{
			"Name": "shared.scope"
		},
		{
			"Description": "A transaction",
			"DisplayName": "Transaction",
			"Name": "transaction"
		}
	],
	"Authentication": {
		//"ActiveLoginOptions": {
		//	"ApiKey": "abcd",
		//	"BankIdServiceKey": "abcd",
		//	"BankIdUseQrCode": true,
		//	"ClientCertificate": {
		//		"Options": {
		//			"Password": "qwerty123",
		//			"Path": "Data/BankId-Test-Client.pfx"
		//		},
		//		"Type": "RegionOrebroLan.Security.Cryptography.Configuration.FileResolverOptions, RegionOrebroLan"
		//	},
		//	" - Possible environment values": "Production, Simulated or Test",
		//	"Environment": "Simulated",
		//	"RootCertificate": {
		//		"Options": {
		//			"Path": "CERT:\\LocalMachine\\Root\\b581b136673317a3422d2e4b4f6bf3f77af34798"
		//		},
		//		"Type": "RegionOrebroLan.Security.Cryptography.Configuration.StoreResolverOptions, RegionOrebroLan"
		//	},
		//	"SimulatedPerson": {
		//		"GivenName": "Jocke",
		//		"Surname": "med Kniven"
		//	}
		//},
		"CallbackDecorators": {
			//"ActiveDirectoryCallbackDecorator": {
			//	"AuthenticationSchemes": {
			//		"SithsCertificate": 100
			//	},
			//	"Type": "RegionOrebroLan.Web.Authentication.Decoration.ActiveDirectoryCallbackDecorator, RegionOrebroLan.Web.Authentication"
			//},
			//"Replacer": {
			//	"AuthenticationSchemes": {
			//		"Negotiate": 120,
			//		"SithsCertificate": 120
			//	},
			//	"Options": {
			//		"Replacements": {
			//			"nameid": "sub",
			//			"unique_name": "name"
			//		}
			//	},
			//	"Type": "RegionOrebroLan.Web.Authentication.Decoration.Replacer, RegionOrebroLan.Web.Authentication"
			//},
			//"MicrosoftToJwtReplacer": {
			//	"AuthenticationSchemes": {
			//		"Negotiate": 110,
			//		"SithsCertificate": 110
			//	},
			//	"Type": "RegionOrebroLan.Web.Authentication.Decoration.MicrosoftToJwtReplacer, RegionOrebroLan.Web.Authentication"
			//},
			//"SithsCertificateSubjectExtractor": {
			//	"AuthenticationSchemes": {
			//		"SithsCertificate": 200
			//	},
			//	"Options": {
			//		"CertificateSubjectClaimTypes": [ "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/x500distinguishedname" ]
			//	},
			//	"Type": "RegionOrebroLan.Web.Authentication.Decoration.SithsCertificateSubjectExtractor, RegionOrebroLan.Web.Authentication"
			//}
		},
		" - Comment": "Explain the path thing.",
		"CommonOptions": {
			"Default": {
				"ForwardSignOut": "idsrv"
			}
		},
		"Cookies": {
			"TicketStore": {
				"Options": {
					"CookieAuthenticationSchemes": [
						"Identity.Application",
						"idsrv.external"
					]
				},
				"Type": "RegionOrebroLan.Web.Authentication.Cookies.DependencyInjection.Configuration.DistributedCacheOptions, RegionOrebroLan.Web.Authentication.Cookies"
			}
		},
		"SchemeRegistrations": {
			//"BankIdOtherDevice": {
			//	"CommonOptionsPaths": [
			//		"Authentication:ActiveLoginOptions"
			//	],
			//	"DisplayName": "Bank-ID (other device)",
			//	"Icon": "bankid",
			//	"Options": {

			//	},
			//	"Type": "RegionOrebroLan.ActiveLogin.Authentication.DependencyInjection.Registration.BankIdOtherDeviceRegistrator, RegionOrebroLan.ActiveLogin.Authentication"
			//},
			//"BankIdSameDevice": {
			//	"CommonOptionsPaths": [
			//		"Authentication:ActiveLoginOptions"
			//	],
			//	"DisplayName": "Bank-ID (same device)",
			//	"Icon": "bankid",
			//	"Type": "RegionOrebroLan.ActiveLogin.Authentication.DependencyInjection.Registration.BankIdSameDeviceRegistrator, RegionOrebroLan.ActiveLogin.Authentication"
			//},
			"Certificate": {
				" - Note - ": "This is for IdentityServer MTLS. No validation-criteria here because client-secrets should be used for validation.",
				" - CommonOptionsPaths": [
					"Authentication:CommonOptions:DefaultCertificateOptions"
				],
				"Interactive": false,
				"Options": {
					"Validator": {
						"AllowedCertificateKinds": "All",
						"Chained": {
							" - CustomTrustChecking": true,
							"RevocationMode": "NoCheck",
							" - TrustedRootCertificateResolvers": [
								{
									"Options": {
										"Path": "Data/Test-IdentityServer-Root-CA.cer"
									},
									"Type": "RegionOrebroLan.Security.Cryptography.Configuration.FileResolverOptions, RegionOrebroLan"
								}
							]
						}
					}
				},
				"Type": "RegionOrebroLan.Web.Authentication.DependencyInjection.Registration.CertificateRegistrator, RegionOrebroLan.Web.Authentication"
			},
			//"GrandIdBankIdChooseDevice": {
			//	"CommonOptionsPaths": [
			//		"Authentication:ActiveLoginOptions"
			//	],
			//	"DisplayName": "Grand-ID (choose device)",
			//	"Icon": "grandid",
			//	"Type": "RegionOrebroLan.ActiveLogin.Authentication.DependencyInjection.Registration.GrandIdChooseDeviceRegistrator, RegionOrebroLan.ActiveLogin.Authentication"
			//},
			//"GrandIdBankIdOtherDevice": {
			//	"CommonOptionsPaths": [
			//		"Authentication:ActiveLoginOptions"
			//	],
			//	"DisplayName": "Grand-ID (other device)",
			//	"Icon": "grandid",
			//	"Type": "RegionOrebroLan.ActiveLogin.Authentication.DependencyInjection.Registration.GrandIdOtherDeviceRegistrator, RegionOrebroLan.ActiveLogin.Authentication"
			//},
			//"GrandIdBankIdSameDevice": {
			//	"CommonOptionsPaths": [
			//		"Authentication:ActiveLoginOptions"
			//	],
			//	"DisplayName": "Grand-ID (same device)",
			//	"Icon": "grandid",
			//	"Type": "RegionOrebroLan.ActiveLogin.Authentication.DependencyInjection.Registration.GrandIdSameDeviceRegistrator, RegionOrebroLan.ActiveLogin.Authentication"
			//},
			"Microsoft": {
				"CommonOptionsPaths": [
					"Authentication:CommonOptions:Default"
				],
				"Options": {
					"ClientId": "2dadf463-b32c-4602-9866-d5a08b2eb94f",
					"ClientSecret": "/O9Y3xO=@4bflHfh@Vd68tlpscYR]ZWL"
				},
				"Type": "RegionOrebroLan.Web.Authentication.DependencyInjection.Registration.MicrosoftAccountRegistrator, RegionOrebroLan.Web.Authentication"
			},
			"Negotiate": {
				"DisplayName": "Windows",
				"Type": "RegionOrebroLan.Web.Authentication.DependencyInjection.Registration.NegotiateRegistrator, RegionOrebroLan.Web.Authentication"
			},
			"SithsCertificate": {
				"DisplayName": "SITHS certificate",
				"Icon": "net-id",
				"Options": {
					"Validator": {
						"AllowedCertificateKinds": "Chained",
						"Chained": {
							"Matching": {
								"Criteria": [
									{
										"PropertyName": "Issuer",
										"ValuePattern": "CN=SITHS e-id*"
									}
								]
							}
						}
					}
				},
				"Type": "RegionOrebroLan.Web.Authentication.DependencyInjection.Registration.CertificateRegistrator, RegionOrebroLan.Web.Authentication"
			},
			"TestSithsCertificate": {
				"DisplayName": "Test SITHS certificate",
				"Icon": "net-id",
				"Options": {
					"Validator": {
						"AllowedCertificateKinds": "Chained",
						"Chained": {
							"Matching": {
								"Criteria": [
									{
										"PropertyName": "Issuer",
										"ValuePattern": "CN=Test SITHS e-id*"
									}
								]
							}
						}
					}
				},
				"Type": "RegionOrebroLan.Web.Authentication.DependencyInjection.Registration.CertificateRegistrator, RegionOrebroLan.Web.Authentication"
			}
		}
	},
	"Authorization": {
		"MiddlewareEnabled": false,
		"Policy": {
			"Permissions": [
				{
					"Name": "Administrator",
					"Roles": [ "Administrators" ]
				}
			],
			"Roles": [
				{
					"Name": "Administrators",
					"Users": [ "40f297bb-47eb-464b-bb07-80b1ec3f862d" ]
				}
			]
		}
	},
	"Caching": {
		"DistributedCache": {
			"ConnectionStringName": "IdentityServer",
			"Options": {
				" - see": "RegionOrebroLan.Caching.Distributed.Configuration.SqliteCacheOptions"
			},
			"Type": "RegionOrebroLan.Caching.Distributed.DependencyInjection.Configuration.SqliteOptions, RegionOrebroLan.Caching"
		}
	},
	"Clients": [
		{
			"AllowedGrantTypes": [ "urn:ietf:params:oauth:grant-type:device_code" ],
			"AllowedScopes": [ "email", "openid", "profile", "resource1.scope1", "resource2.scope1" ],
			"AllowOfflineAccess": true,
			"ClientId": "device",
			"ClientName": "Device",
			"ClientSecrets": [
				{
					"Description": "Secret to validate that the client-certificate is issued by \"Test-IdentityServer Root CA\"",
					"Type": "X509Issuer",
					"Value": "CN=Test-IdentityServer Root CA"
				}
			],
			"Description": "Client for testing device flow.",
			"RequireClientSecret": false
		},
		{
			"AllowedGrantTypes": [ "authorization_code", "client_credentials" ],
			"AllowedScopes": [ "openid", "profile", "resource1.scope1", "resource1.scope2" ],
			"ClientId": "interactive_client",
			"ClientSecrets": [ { "Value": "K7gNU3sdo+OL0wNhqoVWhr3g6s1xYv72ol/pe/Unols=" } ],
			"RedirectUris": [ "https://localhost:5008/" ]
		},
		{
			"AllowedGrantTypes": [ "client_credentials" ],
			"AllowedScopes": [ "resource1.scope1", "resource1.scope2" ],
			"Claims": [
				{
					"type": "c1",
					"value": "c1-value"
				},
				{
					"type": "c2",
					"value": "c2-value"
				}
			],
			"ClientId": "machine_client",
			"ClientSecrets": [ { "Value": "K7gNU3sdo+OL0wNhqoVWhr3g6s1xYv72ol/pe/Unols=" } ],
			"Properties": { "foo": "bar" }
		},
		{
			"AllowedGrantTypes": [ "authorization_code" ],
			"AllowOfflineAccess": true,
			"AllowedScopes": [ "email", "offline_access", "openid", "profile", "role-service" ],
			"ClientId": "mvc-windows",
			"ClientName": "ASP.NET Core MVC Windows",
			"ClientSecrets": [ { "Value": "K7gNU3sdo+OL0wNhqoVWhr3g6s1xYv72ol/pe/Unols=" } ],
			"ClientUri": "https://localhost:5001/",
			"EnableLocalLogin": false,
			"FrontChannelLogoutUri": "https://localhost:5001/signout-oidc",
			"IdentityProviderRestrictions": [ "Negotiate", "SithsCertificate" ],
			"PostLogoutRedirectUris": [ "https://localhost:5001/signout-callback-oidc" ],
			"RedirectUris": [ "https://localhost:5001/signin-oidc" ],
			"RequireConsent": true
		},
		{
			"AllowedGrantTypes": [ "client_credentials" ],
			"AllowedScopes": [ "resource1.scope1", "resource2.scope1" ],
			"ClientId": "MTLS-Test",
			"ClientSecrets": [
				{
					"Description": "Secret to validate that the client-certificate is issued by \"Test-IdentityServer Root CA\"",
					"Type": "X509Issuer",
					"Value": "CN=Test-IdentityServer Root CA"
				}
			],
			"Description": "Client for testing mutual transport layer security."
		},
		{
			"AllowedScopes": [ "email", "inera", "openid", "profile" ],
			"ClientId": "saml-service-provider-1",
			"ClientName": "SAML Service-Provider 1",
			"ProtocolType": "saml2p"
		},
		{
			"AllowedScopes": [ "email", "inera", "openid", "profile" ],
			"ClientId": "saml-service-provider-2",
			"ClientName": "SAML Service-Provider 2",
			"ProtocolType": "saml2p"
		},
		{
			"AllowedScopes": [ "email", "inera", "openid", "profile" ],
			"ClientId": "saml-service-provider-3",
			"ClientName": "SAML Service-Provider 3",
			"ProtocolType": "saml2p"
		}
	],
	"ConnectionStrings": {
		"IdentityServer": "Data Source=|DataDirectory|Identity-Server.db"
	},
	"Data": {
		"Provider": "Sqlite"
	},
	"DataProtection": {
		" - ConnectionStringName": "Connection-string name. The default connection-string-name is 'Data-Protection'.",
		"ConnectionStringName": "IdentityServer",
		"KeyProtection": {
			"CertificateResolver": {
				"Options": {
					"Password": "password",
					"Path": "Data/Development-Key-Protection-Certificate.pfx"
				},
				"Type": "RegionOrebroLan.Security.Cryptography.Configuration.FileResolverOptions, RegionOrebroLan"
			},
			"Type": "RegionOrebroLan.DataProtection.DependencyInjection.Configuration.KeyProtection.CertificateOptions, RegionOrebroLan.DataProtection"
		},
		" - MigrationsAssembly": "Assembly-name",
		"Options": {
			" - see": "Microsoft.AspNetCore.DataProtection.DataProtectionOptions"
		},
		"Type": "RegionOrebroLan.DataProtection.DependencyInjection.Configuration.SqliteOptions, RegionOrebroLan.DataProtection"
	},
	"Enabled": true,
	"ExceptionHandling": {
		"DeveloperExceptionPage": true
	},
	"FeatureManagement": {
		"ClaimsSelection": true,
		"DataDirectory": true,
		"DataSeeding": true,
		"DataTransfer": true,
		"Debug": true,
		"Development": true,
		"Diagnostics": true,
		"DynamicAuthenticationProviders": true,
		"FormsAuthentication": true,
		"Home": true,
		"HostInformation": true,
		"Saml": true,
		"SecurityHeaders": true,
		"WsFederation": true
	},
	"IdentityProviders": [
		{
			"DisplayName": "Duende IdentityServer demo",
			"Properties": {
				"Authority": "https://demo.duendesoftware.com",
				"ClientId": "login",
				"Icon": "duende-identity-server",
				"Scope": "openid profile email",
				"SignOutSupport": "true"
			},
			"Scheme": "DuendeIdentityServerDemo",
			"Type": "oidc"
		},
		{
			"DisplayName": "Google",
			"Properties": {
				"Authority": "https://accounts.google.com",
				"ClientId": "260174815090-v4u9lb79btv3pbss9tk9qupvqq0voo7s.apps.googleusercontent.com",
				"Icon": "google",
				"Scope": "openid profile email"
			},
			"Scheme": "Google",
			"Type": "oidc"
		},
		{
			"DisplayName": "IdentityServer4 demo",
			"Properties": {
				"Authority": "https://demo.identityserver.io",
				"ClientId": "login",
				"Icon": "identity-server-4",
				"Scope": "openid profile email",
				"SignOutSupport": "true"
			},
			"Scheme": "IdentityServer4Demo",
			"Type": "oidc"
		}
	],
	"IdentityResources": [
		{
			"DisplayName": "Email-address",
			"Emphasize": true,
			"Name": "email",
			"UserClaims": [ "email", "email_verified" ]
		},
		{
			"DisplayName": "Inera",
			"Emphasize": true,
			"Name": "inera",
			"UserClaims": [
				"commissionHsaId",
				"commissionName",
				"commissionPurpose",
				"commissionRight",
				"credentialGivenName",
				"credentialPersonalIdentityNumber",
				"credentialSurname",
				"employeeHsaId",
				"healthCareProviderHsaId",
				"healthCareProviderName",
				"healthCareProviderOrgNo",
				"healthCareUnitHsaId",
				"healthCareUnitName",
				"mail"
			]
		},
		{
			"DisplayName": "User-identifier",
			"Name": "openid",
			"Required": true,
			"UserClaims": [ "sub" ]
		},
		{
			"DisplayName": "User-profile",
			"Description": "User-profile information (first name, last name, etc.)",
			"Emphasize": true,
			"Name": "profile",
			"UserClaims": [
				"birthdate",
				"certserialnumber",
				"certsubject",
				"certthumbprint",
				"family_name",
				"gender",
				"given_name",
				"hsa_identity",
				"locale",
				"middle_name",
				"name",
				"nickname",
				"personal_identity_number",
				"picture",
				"preferred_username",
				"primarysid",
				"profile",
				"siths_serial_number",
				"updated_at",
				"upn",
				"website",
				"winaccountname",
				"zoneinfo"
			]
		}
	],
	"IdentityServer": {
		"DynamicProviders": {
			" - info": "Below is necessary for back-channel-sign-out to work. This has to do with using ASP.NET Identity.",
			"SignOutScheme": "Identity.Application"
		},
		"KeyManagement": {
			" - info": "Below is necessary for RSK-Saml & RSK-WsFederation features. Not needed if the features are disabled.",
			"SigningAlgorithms": [
				{
					"Name": "RS256",
					"UseX509Certificate": true
				}
			]
		},
		"MutualTls": {
			" - DomainName": "mtls",
			"Enabled": true
		},
		"Saml": {
			"DefaultClaimMapping": {
				"commissionHsaId": "http://sambi.se/attributes/1/commissionHsaId",
				"commissionName": "http://sambi.se/attributes/1/commissionName",
				"commissionPurpose": "http://sambi.se/attributes/1/commissionPurpose",
				"commissionRight": "http://sambi.se/attributes/1/commissionRight",
				"credentialGivenName": "http://sambi.se/attributes/1/givenName",
				"credentialPersonalIdentityNumber": "http://sambi.se/attributes/1/personalIdentityNumber",
				"credentialSurname": "http://sambi.se/attributes/1/surname",
				"email": "http://sambi.se/attributes/1/mail",
				"employeeHsaId": "http://sambi.se/attributes/1/employeeHsaId",
				"healthCareProviderHsaId": "http://sambi.se/attributes/1/healthCareProviderHsaId",
				"healthCareProviderName": "http://sambi.se/attributes/1/healthCareProviderName",
				"healthCareProviderOrgNo": "http://sambi.se/attributes/1/healthCareProviderOrgNo",
				"healthCareUnitHsaId": "http://sambi.se/attributes/1/healthCareUnitHsaId",
				"healthCareUnitName": "http://sambi.se/attributes/1/healthCareUnitName",
				"mail": "http://sambi.se/attributes/1/mail"
			},
			"ForceAuthentication": {
				"Enabled": true,
				"Options": {},
				"Router": "HansKindberg.IdentityServer.Saml.Routing.ClaimsSelectionForceAuthenticationRouter, HansKindberg.IdentityServer",
				"RouterLifetime": "Scoped"
			},
			"Licensee": "See LicenseKey below.",
			"LicenseKey": "You need to purchase a license or get a demo-license, https://www.identityserver.com/products/saml2p",
			"WantAuthenticationRequestsSigned": false
		},
		"WsFederation": {
			"Licensee": "See LicenseKey below.",
			"LicenseKey": "You need to purchase a license or get a demo-license, https://www.identityserver.com/products/ws-federation"
		}
	},
	"Localization": {
		"AlphabeticalSorting": true,
		"FileResourcesDirectoryPath": "Resources",
		"IncludeParentCultures": true,
		"ThrowErrors": false
	},
	"RequestLocalization": {
		"DefaultRequestCulture": {
			"Culture": "en-001",
			"UiCulture": "en"
		},
		"FallbackToParentCultures": true,
		"FallbackToParentUiCultures": true,
		"RequestCultureProviders": [
			"HansKindberg.IdentityServer.Web.Localization.OpenIdConnectRequestCultureProvider, HansKindberg.IdentityServer",
			"Microsoft.AspNetCore.Localization.CookieRequestCultureProvider, Microsoft.AspNetCore.Localization"
		],
		" - RequestCultureProviders - more alternatives": [
			"Microsoft.AspNetCore.Localization.AcceptLanguageHeaderRequestCultureProvider, Microsoft.AspNetCore.Localization"
		],
		"SupportedCultures": [
			"en-001",
			"sv-SE"
		],
		"SupportedUiCultures": [
			"en",
			"sv"
		]
	},
	"Security": {
		"Claims": {
			"ClaimsSelection": {
				"ClaimsSelectorLoader": {
					" - see: HansKindberg.IdentityServer.Security.Claims.Configuration.ClaimsSelectorLoaderOptions": null,
					" - example (the ClaimsSelectors key should be under ClaimsSelectorLoader), each item under ClaimsSelectors is of type HansKindberg.IdentityServer.Security.Claims.Configuration.ClaimsSelectorOptions": {
						"ClaimsSelectors": {
							"MyAuthenticationScheme": {
								" - AuthenticationSchemes: The authentication-schemes that will use the claims-selector. The number 100 below is an index. If an authentication-scheme has multiple claims-selectors registered this is the number for the order they will execute.": null,
								"AuthenticationSchemes": {
									"MyAuthenticationScheme": 100
								},
								" - Enabled: true or false, ": null,
								"Enabled": true,
								" - Options: Any properties you want to bind to the instance of the type specified as Type. Also binds non public properties (BindNonPublicProperties).": null,
								"Options": {
									"FirstProperty": "First value",
									"SecondProperty": "Second value",
									" - etc": null
								},
								"Type": "HansKindberg.IdentityServer.Security.Claims.CountyClaimsSelector, HansKindberg.IdentityServer"
							}
						}
					}
				}
			}
		}
	},
	"Serilog": {
		"MinimumLevel": {
			"Default": "Error",
			"Override": {
				"HansKindberg.IdentityServer": "Verbose"
			}
		},
		"WriteTo": [
			{
				"Name": "Console",
				"Args": {
					"outputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} - [{Level}] - {SourceContext}: {Message}{NewLine}{Exception}"
				}
			},
			{
				"Name": "Debug",
				"Args": {
					"outputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} - [{Level}] - {SourceContext}: {Message}{NewLine}{Exception}"
				}
			},
			{
				"Name": "File",
				"Args": {
					"outputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} - [{Level}] - {SourceContext}: {Message}{NewLine}{Exception}",
					"path": "Data/Log.txt"
				}
			},
			{
				"Name": "Seq",
				"Args": {
					"apiKey": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
					"serverUrl": "http://localhost:5555"
				}
			}
		]
	},
	"ServiceProviders": [
		{
			"AssertionConsumerServices": [
				{
					"Binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
					"Location": "https://localhost:5211/signin-saml"
				}
			],
			"EntityId": "saml-service-provider-1",
			"SingleLogoutServices": [
				{
					"Binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
					"Location": "https://localhost:5211/signout-saml"
				}
			]
		},
		{
			"AssertionConsumerServices": [
				{
					"Binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
					"Location": "https://localhost:5212/signin-saml"
				}
			],
			"EntityId": "saml-service-provider-2",
			"SingleLogoutServices": [
				{
					"Binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
					"Location": "https://localhost:5212/signout-saml"
				}
			]
		},
		{
			"AssertionConsumerServices": [
				{
					"Binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
					"Location": "https://localhost:5213/signin-saml"
				}
			],
			"EntityId": "saml-service-provider-3",
			"SingleLogoutServices": [
				{
					"Binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
					"Location": "https://localhost:5213/signout-saml"
				}
			]
		}
	],
	"Users": [
		{
			"Email": "administrator@example.com",
			"Id": "40f297bb-47eb-464b-bb07-80b1ec3f862d",
			"Password": "P@ssword12",
			"UserName": "Administrator"
		},
		{
			"Email": "alice@example.com",
			"Id": "ebd32f4c-3ae8-41e9-aa05-d560758d6b1b",
			"Password": "P@ssword12",
			"UserName": "Alice"
		},
		{
			"Email": "bob@example.com",
			"Id": "32ac4b0e-003b-4c47-a386-ec48b782fe78",
			"Password": "P@ssword12",
			"UserName": "Bob"
		}
	]
}